import { GoogleGenerativeAI } from '@google/generative-ai'

// Configuration
const GOOGLE_AI_API_KEY = import.meta.env.VITE_GOOGLE_AI_API_KEY || ''

if (!GOOGLE_AI_API_KEY) {
  console.warn('Google AI API key is not configured. Please set VITE_GOOGLE_AI_API_KEY in your environment.')
}

// Initialize Google AI
const genAI = new GoogleGenerativeAI(GOOGLE_AI_API_KEY)

export interface ProcessingResult {
  success: boolean
  data?: string
  error?: string
}

export interface ProcessingProgress {
  step: string
  progress: number
  details: string
  logs: string[]
}

export class GoogleAIService {
  private model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
  private progressCallback?: (progress: ProcessingProgress) => void

  setProgressCallback(callback: (progress: ProcessingProgress) => void) {
    this.progressCallback = callback
  }

  private updateProgress(step: string, progress: number, details: string, log?: string) {
    if (this.progressCallback) {
      const logs = log ? [log] : []
      this.progressCallback({ step, progress, details, logs })
    }
  }

  async transcribeAudio(audioFile: File): Promise<ProcessingResult> {
    try {
      if (!GOOGLE_AI_API_KEY) {
        this.updateProgress('Error', 0, 'API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Google AI API Key')
        return {
          success: false,
          error: 'Google AI API key is not configured'
        }
      }

      // Step 1: Validate file
      this.updateProgress('Validating', 10, '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå...', `üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${audioFile.name}`)
      
      if (!this.isValidAudioFile(audioFile)) {
        this.updateProgress('Error', 0, '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö')
        return {
          success: false,
          error: 'Invalid audio file format'
        }
      }

      // Step 2: Convert to base64
      this.updateProgress('Converting', 25, '‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå...', `üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Base64 (‡∏Ç‡∏ô‡∏≤‡∏î: ${(audioFile.size / 1024 / 1024).toFixed(2)} MB)`)
      
      const audioData = await this.fileToBase64(audioFile)
      
      // Step 3: Prepare for AI
      this.updateProgress('Preparing', 40, '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á AI...', 'ü§ñ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google AI Studio')

      // Step 4: Send to AI
      this.updateProgress('Processing', 60, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...', 'üéµ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gemini AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°')
      
      const result = await this.model.generateContent([
        {
          inlineData: {
            data: audioData,
            mimeType: audioFile.type || 'audio/mpeg'
          }
        },
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©'
      ])

      // Step 5: Process result
      this.updateProgress('Finalizing', 85, '‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...', 'üìù ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°')

      const response = await result.response
      const text = response.text()

      if (!text || text.trim().length === 0) {
        this.updateProgress('Error', 0, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', '‚ùå AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ')
        return {
          success: false,
          error: 'No transcription result received from AI'
        }
      }

      // Step 6: Complete
      this.updateProgress('Complete', 100, '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!', `‚úÖ ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${text.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`)

      return {
        success: true,
        data: text
      }

    } catch (error: any) {
      console.error('Transcription error:', error)
      this.updateProgress('Error', 0, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‚ùå Error: ${error.message || 'Unknown error'}`)
      return {
        success: false,
        error: error.message || 'An unexpected error occurred during transcription'
      }
    }
  }

  async summarizeAudio(audioFile: File): Promise<ProcessingResult> {
    try {
      if (!GOOGLE_AI_API_KEY) {
        this.updateProgress('Error', 0, 'API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Google AI API Key')
        return {
          success: false,
          error: 'Google AI API key is not configured'
        }
      }

      // Step 1: Validate file
      this.updateProgress('Validating', 10, '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå...', `üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${audioFile.name}`)
      
      if (!this.isValidAudioFile(audioFile)) {
        this.updateProgress('Error', 0, '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö')
        return {
          success: false,
          error: 'Invalid audio file format'
        }
      }

      // Step 2: Convert to base64
      this.updateProgress('Converting', 25, '‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå...', `üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Base64 (‡∏Ç‡∏ô‡∏≤‡∏î: ${(audioFile.size / 1024 / 1024).toFixed(2)} MB)`)
      
      const base64Audio = await this.fileToBase64(audioFile)
      const mimeType = audioFile.type || 'audio/mpeg'

      // Step 3: Prepare for AI
      this.updateProgress('Preparing', 40, '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á AI...', 'ü§ñ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google AI Studio')

      // Step 4: Send to AI for summarization
      this.updateProgress('Processing', 60, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤...', 'üéµ ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gemini AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤')

      const prompt = `
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÇ‡∏î‡∏¢:
        
        1. ‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        2. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏ö‡πà‡∏á‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        3. ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        4. ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡∏û‡∏π‡∏î
        5. ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏ó‡πâ‡∏≤‡∏¢
        
        ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
        ## ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡πÑ‡∏î‡πâ]
        
        ## ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        [‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç]
        
        ## ‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ
        [‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏•‡∏±‡∏Å]
      `

      const result = await this.model.generateContent([
        prompt,
        {
          inlineData: {
            data: base64Audio,
            mimeType: mimeType
          }
        }
      ])

      // Step 5: Process result
      this.updateProgress('Finalizing', 85, '‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...', 'üìù ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ')

      const response = await result.response
      const text = response.text()

      if (!text || text.trim().length === 0) {
        this.updateProgress('Error', 0, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤', '‚ùå AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ')
        return {
          success: false,
          error: 'No summarization result received from AI'
        }
      }

      // Step 6: Complete
      this.updateProgress('Complete', 100, '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!', `‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${text.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`)

      return {
        success: true,
        data: text
      }

    } catch (error: any) {
      console.error('Summarization error:', error)
      this.updateProgress('Error', 0, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‚ùå Error: ${error.message || 'Unknown error'}`)
      return {
        success: false,
        error: error.message || 'An unexpected error occurred during summarization'
      }
    }
  }

  private async fileToBase64(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = () => {
        const result = reader.result as string
        // Remove data URL prefix (e.g., "data:audio/mpeg;base64,")
        const base64 = result.split(',')[1]
        resolve(base64)
      }
      reader.onerror = reject
      reader.readAsDataURL(file)
    })
  }

  private isValidAudioFile(file: File): boolean {
    const validTypes = [
      'audio/mp3',
      'audio/mpeg',
      'audio/wav',
      'audio/ogg',
      'audio/aac',
      'audio/m4a',
      'audio/flac',
      'audio/webm',
      'video/mp4', // Often contains audio
      'video/webm'
    ]
    
    const validExtensions = ['.mp3', '.wav', '.ogg', '.aac', '.m4a', '.flac', '.webm', '.mp4']
    const fileName = file.name.toLowerCase()
    const hasValidExtension = validExtensions.some(ext => fileName.endsWith(ext))
    
    return validTypes.includes(file.type) || hasValidExtension
  }
}

export const googleAIService = new GoogleAIService()
