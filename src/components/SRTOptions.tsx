import React, { useState } from 'react'
import './SRTOptions.css'

interface SRTOptionsProps {
  onTypeSelect: (type: 'transcribe' | 'summarize' | 'srt') => void
  selectedType: 'transcribe' | 'summarize' | 'srt' | null
  onProcess: (srtLanguage?: 'original' | 'thai') => void
  isProcessing: boolean
}

const SRTOptions: React.FC<SRTOptionsProps> = ({
  onTypeSelect,
  selectedType,
  onProcess,
  isProcessing
}) => {
  const [srtLanguage, setSrtLanguage] = useState<'original' | 'thai'>('original')

  const handleProcess = () => {
    if (selectedType === 'srt') {
      onProcess(srtLanguage)
    } else {
      onProcess()
    }
  }

  return (
    <div className="processing-options">
      <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•</h2>
      
      <div className="option-grid">
        <button
          className={`option-card ${selectedType === 'transcribe' ? 'selected' : ''}`}
          onClick={() => onTypeSelect('transcribe')}
          disabled={isProcessing}
        >
          <div className="option-icon">üìù</div>
          <div className="option-title">‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>
          <div className="option-desc">‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</div>
        </button>

        <button
          className={`option-card ${selectedType === 'summarize' ? 'selected' : ''}`}
          onClick={() => onTypeSelect('summarize')}
          disabled={isProcessing}
        >
          <div className="option-icon">üìã</div>
          <div className="option-title">‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤</div>
          <div className="option-desc">‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á</div>
        </button>

        <button
          className={`option-card ${selectedType === 'srt' ? 'selected' : ''}`}
          onClick={() => onTypeSelect('srt')}
          disabled={isProcessing}
        >
          <div className="option-icon">üé¨</div>
          <div className="option-title">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡∏±‡∏ö‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡πâ‡∏•</div>
          <div className="option-desc">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ã‡∏±‡∏ö .srt ‡∏û‡∏£‡πâ‡∏≠‡∏° timing</div>
        </button>
      </div>

      {/* SRT Language Options */}
      {selectedType === 'srt' && (
        <div className="srt-language-options">
          <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏ã‡∏±‡∏ö‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡πâ‡∏•</h3>
          <div className="language-buttons">
            <button
              className={`language-btn ${srtLanguage === 'original' ? 'selected' : ''}`}
              onClick={() => setSrtLanguage('original')}
              disabled={isProcessing}
            >
              üåê ‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            </button>
            <button
              className={`language-btn ${srtLanguage === 'thai' ? 'selected' : ''}`}
              onClick={() => setSrtLanguage('thai')}
              disabled={isProcessing}
            >
              üáπüá≠ ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
            </button>
          </div>
        </div>
      )}

      {selectedType && (
        <div className="process-section">
          <button
            className="process-button"
            onClick={handleProcess}
            disabled={isProcessing}
          >
            {isProcessing ? (
              <>
                <span className="loading-spinner"></span>
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...
              </>
            ) : (
              <>
                {selectedType === 'transcribe' && 'üìù ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡∏≠‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'}
                {selectedType === 'summarize' && 'üìã ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤'}
                {selectedType === 'srt' && `üé¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡∏±‡∏ö ${srtLanguage === 'thai' ? '(‡πÅ‡∏õ‡∏•‡πÑ‡∏ó‡∏¢)' : '(‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö)'}`}
              </>
            )}
          </button>
        </div>
      )}
    </div>
  )
}

export default SRTOptions
